#include "freecell.h"
#include <algorithm>
#include <stdexcept>      // std::invalid_argument

using namespace std;

Freecell::Freecell(){
   std::vector<Card> cards = std::vector<Card>();
  //A pakli előállítása
  std::vector<suit> suits = std::vector<suit>();
  suits.push_back(suit::spades);
  suits.push_back(suit::hearts);
  suits.push_back(suit::clubs);
  suits.push_back(suit::diamonds);
  Card card = Card(suits.at(0), 1);
  for (int i = 0; i < suits.size(); i++){
    for (int j = card.get_min_value(); j <= card.get_max_value(); j++){
      Card card = Card(suits.at(i), j);
      cards.push_back(card);
    }
  }
  //Keverés
  std::random_shuffle ( cards.begin(), cards.end() );
  this->deck = cards;
  std::vector<Card> freecell1_cards = std::vector<Card>();
  std::vector<Card> freecell2_cards = std::vector<Card>();
  std::vector<Card> freecell3_cards = std::vector<Card>();
  std::vector<Card> freecell4_cards = std::vector<Card>();
  std::vector<Card> stack_cards1 = std::vector<Card>();
  std::vector<Card> stack_cards2 = std::vector<Card>();
  std::vector<Card> stack_cards3 = std::vector<Card>();
  std::vector<Card> stack_cards4 = std::vector<Card>();
  std::vector<Card> foundation_cards1 = std::vector<Card>();
  std::vector<Card> foundation_cards2 = std::vector<Card>();
  std::vector<Card> foundation_cards3 = std::vector<Card>();
  std::vector<Card> foundation_cards4 = std::vector<Card>();
  std::vector<Card> foundation_cards5 = std::vector<Card>();
  std::vector<Card> foundation_cards6 = std::vector<Card>();
  std::vector<Card> foundation_cards7 = std::vector<Card>();
  std::vector<Card> foundation_cards8 = std::vector<Card>();    
  
  vector< std::vector<Card> > foundations;
  foundations.push_back(foundation_cards1);
  foundations.push_back(foundation_cards2);
  foundations.push_back(foundation_cards3);
  foundations.push_back(foundation_cards4);
  foundations.push_back(foundation_cards5);
  foundations.push_back(foundation_cards6);
  foundations.push_back(foundation_cards7);
  foundations.push_back(foundation_cards8);

  //Kezdetben az összes lap a foundationokben van felfordítva
  for (int k = 0; k < deck.size(); k++){
      deck.at(k).up();
      foundations.at(k % foundations.size()).push_back(deck.at(k));
    
  }  
    
  Pile freecell1 = Pile(pile_type::freecell, freecell1_cards);
  Pile freecell2 = Pile(pile_type::freecell, freecell2_cards);
  Pile freecell3 = Pile(pile_type::freecell, freecell3_cards);
  Pile freecell4 = Pile(pile_type::freecell, freecell4_cards);
  Pile stack1 = Pile(pile_type::stack, stack_cards1);
  Pile stack2 = Pile(pile_type::stack, stack_cards2);
  Pile stack3 = Pile(pile_type::stack, stack_cards3);
  Pile stack4 = Pile(pile_type::stack, stack_cards4);
  Pile foundation1 = Pile(pile_type::foundation, foundation_cards1);
  Pile foundation2 = Pile(pile_type::foundation, foundation_cards1);
  Pile foundation3 = Pile(pile_type::foundation, foundation_cards1);
  Pile foundation4 = Pile(pile_type::foundation, foundation_cards1);
  Pile foundation5 = Pile(pile_type::foundation, foundation_cards1);
  Pile foundation6 = Pile(pile_type::foundation, foundation_cards1);
  Pile foundation7 = Pile(pile_type::foundation, foundation_cards1);
  Pile foundation8 = Pile(pile_type::foundation, foundation_cards1);
  
  
  this->piles = std::vector<Pile>();
  piles.push_back(freecell1);
  piles.push_back(freecell2);
  piles.push_back(freecell3);
  piles.push_back(freecell4);
  piles.push_back(stack1);
  piles.push_back(stack2);
  piles.push_back(stack3);
  piles.push_back(stack4);
  piles.push_back(foundation1);
  piles.push_back(foundation2);
  piles.push_back(foundation3);
  piles.push_back(foundation4);
  piles.push_back(foundation5);
  piles.push_back(foundation6);
  piles.push_back(foundation7);
  piles.push_back(foundation8);

}

void Freecell::add_card_from(Pile pile1, Pile pile2){
  if (pile1.get_type() == pile_type::freecell){
    if (pile2.get_type() == pile_type::stack){
      Card card = pile1.last();
      if (pile2.is_legal_stack(card)){
        pile2.add_card(pile1.remove_card());
      }
    }
    else if (pile2.get_type() == pile_type::foundation){
        if (pile2.empty()){
          Card card = pile1.remove_card();
          pile2.add_card(card);   
        }
        else {
          Card card = pile1.last();
          vector<Card> cards = vector<Card>();
          cards.push_back(pile2.last());
          cards.push_back(pile1.last());
          if (pile2.is_legal_move(2, strat, cards)){
            card = pile1.remove_card();
            pile2.add_card(card);
        }
        }
    }
      else {
    throw std::invalid_argument("Ez a lépés nem szabályos.");
  }
  }
  else if (pile1.get_type() == pile_type::foundation){
    if (pile2.get_type() == pile_type::freecell){
      Card card = pile1.last();
      if (pile2.empty()){
        pile1.remove_card();
        pile2.add_card(card);
      }
    }
    else if (pile2.get_type() == pile_type::foundation){
        if (pile2.empty()){
          Card card = pile1.remove_card();
          pile2.add_card(card);   
        }
        else {
          Card card = pile1.last();
          vector<Card> cards = vector<Card>();
          cards.push_back(pile2.last());
          cards.push_back(pile1.last());
          if (pile2.is_legal_move(2, strat, cards)){
            pile2.add_card(pile1.remove_card());
          }
        }
    }
      else {
    throw std::invalid_argument("Ez a lépés nem szabályos.");
  }  
  }
  else {
    throw std::invalid_argument("Ez a lépés nem szabályos.");
  }
}

void Freecell::add_cards_from(Pile found1, Pile found2, int k){
  //Könnyű az az admirális, ahol korlátlanul sok lap mozgatható
  //Nem lehet túl sok lapot elvenni
  int n = 1;
  if (k < empty_freecells() + 1)
    n = k;
  else
    n = empty_freecells() + 1;
  if (n == 1) {
    add_card_from(found1, found2);
  }
  else {
    if (found1.get_type() == pile_type::foundation){
      if (found2.get_type() == pile_type::foundation){        
        vector<Card> cas = vector<Card>();
        cas = found1.get_cards();
        vector<Card> cards = vector<Card>();
        if (found2.empty()){
          for (int i = cas.size()-1-n; i<cas.size(); i++){
            cards.push_back(cas.at(i));
          }
          if (found2.is_legal_move(cards.size(), strat, cards) ){
            found1.remove_cards(n, strat);
            found2.add_cards(cards, strat);        
          }
          else {
            throw std::invalid_argument("Ez a lépés nem szabályos.");        
          }        
        }
        else {
          Card card = found2.last();
          vector<Card> cards = vector<Card>();
          cards.push_back(card);
          for (int i = cas.size()-1-n; i<cas.size(); i++){
            cards.push_back(cas.at(i));
          }
          if (found2.is_legal_move(cards.size(), strat, cards)){
            cards.erase(cards.begin());
            found1.remove_cards(n, strat);//?            
            found2.add_cards(cards, strat);
          }
          else {
            throw std::invalid_argument("Ez a lépés nem szabályos.");
          }
        }
      }
    }
      else {
      throw std::invalid_argument("Ez a lépés nem szabályos.");
    }
  }
}

int Freecell::empty_freecells(){
  int free = 0;
  for (int i = 0; i < 4; i++){
    if (piles.at(i).empty()){
      free++;
    }
  }
  return free;
}

int Freecell::legal_length(Pile found1, Pile found2){}   
